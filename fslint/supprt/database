#!/usr/bin/env python2
# encoding: utf8

import sys, os, subprocess
import sqlite3


HASH_CMD = None
DEBUG = False

def hash_file(path):
    cmd_output = subprocess.check_output([HASH_CMD, path]).decode("utf-8")
    hash = cmd_output.split(' ')[0]
    return hash








if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Error, provide the <database path>, <hashing command> and <files list with \\0> ")

    db_path = sys.argv[1]
    HASH_CMD = sys.argv[2]
    files_list = sys.argv[3:]
    files_hashes = dict()

    if not os.path.exists(db_path):
        directory = os.path.dirname(db_path)
        print(directory)
        if not os.path.exists(directory):
            os.makedirs(directory)
        db = sqlite3.connect(db_path)
        cursor = db.cursor()
        cursor.execute(''' CREATE TABLE files(id INTEGER PRIMARY KEY, path TEXT, ctime VARCHAR(50), mtime VARCHAR(50), hash TEXT )  ''')
        db.commit()
    else:
        db = sqlite3.connect(db_path)
        cursor = db.cursor()


    #Existing Files
    if len(files_list) > 0:
        cursor.execute('''SELECT * FROM files WHERE path IN ({seq})'''.format(seq=','.join(['?']*len(files_list))), ([str(f) for f in files_list]))
        commit_count = 0
        for file_record in cursor.fetchall():
            file_path = str(file_record[1])
            try:
                if str(os.path.getctime(file_path)) == file_record[2] and str(os.path.getmtime(file_path)) == file_record[3]:
                    if DEBUG: print("Found")
                    files_hashes[file_path] = file_record[4]
                    files_list.remove(file_path)
                else:
                    if DEBUG: print("Update")
                    hash = hash_file(file_path)
                    cursor.execute('''UPDATE files SET ctime=?, mtime=?, hash=? WHERE path=?''',
                                   (str(os.path.getctime(file_path)), str(os.path.getmtime(file_path)), hash, file_path))
                    commit_count += 1
                    files_hashes[file_path] = hash

                if commit_count == 1000:
                    commit_count = 0
                    db.commit()

            # except UnicodeDecodeError as ude:
            except Exception as e:
                hash = hash_file(file_path)
                files_hashes[file_path] = hash


    #New files
    for file_path in files_list:
        file_path = str(file_path)
        try:
            if DEBUG: print("Insert")
            hash = hash_file(file_path)
            cursor.execute('''INSERT INTO files (path, ctime, mtime, hash) VALUES (?,?,?,?)''',
                         (str(file_path), str(os.path.getctime(file_path)), str(os.path.getmtime(file_path)), hash))
            commit_count += 1
            files_hashes[file_path] = hash

            if commit_count == 1000:
                commit_count = 0
                db.commit()

        #except UnicodeDecodeError as ude:
        except Exception as e:
            hash = hash_file(file_path)
            files_hashes[file_path] = hash

    db.commit()
    db.close()


    for file_hash in files_hashes:
        sys.stdout.write("%s  %s\n" % (files_hashes[file_hash], str(file_hash)))


